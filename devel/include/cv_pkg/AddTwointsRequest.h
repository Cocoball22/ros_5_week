// Generated by gencpp from file cv_pkg/AddTwointsRequest.msg
// DO NOT EDIT!


#ifndef CV_PKG_MESSAGE_ADDTWOINTSREQUEST_H
#define CV_PKG_MESSAGE_ADDTWOINTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cv_pkg
{
template <class ContainerAllocator>
struct AddTwointsRequest_
{
  typedef AddTwointsRequest_<ContainerAllocator> Type;

  AddTwointsRequest_()
    : num(0)  {
    }
  AddTwointsRequest_(const ContainerAllocator& _alloc)
    : num(0)  {
  (void)_alloc;
    }



   typedef int32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddTwointsRequest_

typedef ::cv_pkg::AddTwointsRequest_<std::allocator<void> > AddTwointsRequest;

typedef boost::shared_ptr< ::cv_pkg::AddTwointsRequest > AddTwointsRequestPtr;
typedef boost::shared_ptr< ::cv_pkg::AddTwointsRequest const> AddTwointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cv_pkg::AddTwointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cv_pkg::AddTwointsRequest_<ContainerAllocator1> & lhs, const ::cv_pkg::AddTwointsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cv_pkg::AddTwointsRequest_<ContainerAllocator1> & lhs, const ::cv_pkg::AddTwointsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cv_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54b3c80efd6fae6e6ffff8a4b9facd69";
  }

  static const char* value(const ::cv_pkg::AddTwointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54b3c80efd6fae6eULL;
  static const uint64_t static_value2 = 0x6ffff8a4b9facd69ULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cv_pkg/AddTwointsRequest";
  }

  static const char* value(const ::cv_pkg::AddTwointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num\n"
;
  }

  static const char* value(const ::cv_pkg::AddTwointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddTwointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_pkg::AddTwointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cv_pkg::AddTwointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CV_PKG_MESSAGE_ADDTWOINTSREQUEST_H
