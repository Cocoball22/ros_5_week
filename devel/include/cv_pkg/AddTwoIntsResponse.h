// Generated by gencpp from file cv_pkg/AddTwoIntsResponse.msg
// DO NOT EDIT!


#ifndef CV_PKG_MESSAGE_ADDTWOINTSRESPONSE_H
#define CV_PKG_MESSAGE_ADDTWOINTSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cv_pkg
{
template <class ContainerAllocator>
struct AddTwoIntsResponse_
{
  typedef AddTwoIntsResponse_<ContainerAllocator> Type;

  AddTwoIntsResponse_()
    : fruit_type()  {
    }
  AddTwoIntsResponse_(const ContainerAllocator& _alloc)
    : fruit_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fruit_type_type;
  _fruit_type_type fruit_type;





  typedef boost::shared_ptr< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct AddTwoIntsResponse_

typedef ::cv_pkg::AddTwoIntsResponse_<std::allocator<void> > AddTwoIntsResponse;

typedef boost::shared_ptr< ::cv_pkg::AddTwoIntsResponse > AddTwoIntsResponsePtr;
typedef boost::shared_ptr< ::cv_pkg::AddTwoIntsResponse const> AddTwoIntsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator1> & lhs, const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.fruit_type == rhs.fruit_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator1> & lhs, const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cv_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99d8fef110621c4aa23a2848c4b7110f";
  }

  static const char* value(const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99d8fef110621c4aULL;
  static const uint64_t static_value2 = 0xa23a2848c4b7110fULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cv_pkg/AddTwoIntsResponse";
  }

  static const char* value(const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string fruit_type\n"
"\n"
;
  }

  static const char* value(const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fruit_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddTwoIntsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cv_pkg::AddTwoIntsResponse_<ContainerAllocator>& v)
  {
    s << indent << "fruit_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fruit_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CV_PKG_MESSAGE_ADDTWOINTSRESPONSE_H
